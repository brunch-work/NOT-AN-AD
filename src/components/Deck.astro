---
import "../styles/components/deck.css";

import NotAnAdLogo from "../assets/images/svg/NOT_AN_AD_LOGO.svg";
import TapeIcon from "../assets/images/svg/tape_icon.svg";
import IconStrategy from "../assets/images/svg/icon_strategy.svg";
import IconPartnership from "../assets/images/svg/icon_partnerships.svg";
import IconContent from "../assets/images/svg/icon_content.svg";
import IconEarnedMedia from "../assets/images/svg/icon_earned_media.svg";
import IconAmplification from "../assets/images/svg/icon_amplification.svg";
import CaseStudy from "./CaseStudy.astro";

import {
  deckPageQuery,
  type DeckPageSections,
  type Section,
  type Project,
  type Asset,
} from "../gql/queries.ts";

const response = await fetch("https://graphql.datocms.com/", {
  method: "POST",
  headers: {
    "Content-Type": "application/json",
    Accept: "application/json",
    Authorization: `Bearer ${import.meta.env.DATOCMS_API_KEY}`,
  },
  body: JSON.stringify({
    query: deckPageQuery,
  }),
});

const json = await response.json();
const data: DeckPageSections = json.data;

const sections = data?.deck?.sections ?? [];
---

<div class="grid">
  <span id="top"> </span>
  <header>
    <a href="/" aria-label="Home" class="logo">
      <NotAnAdLogo class="deck-header--logo" fill="currentColor" />
    </a>
    <nav>
      <details aria-label="Sections">
        <summary id="nav-1">Not an ad</summary>
        <ul role="listbox">
          <li><a href="#not-an-ad">Not an ad</a></li>
          <li><a href="#services">Services</a></li>
          <li><a href="#case-studies">Case studies</a></li>
        </ul>
      </details>
      <details aria-label="Case study categories">
        <summary id="nav-2">UGC</summary>
        <ul role="listbox">
          {
            sections.map((section: Section) => {
              return (
                <li>
                  <a href={`#${section.slug}`}>{section.sectionTitle}</a>
                </li>
              );
            })
          }
        </ul>
      </details>
    </nav>
  </header>

  <main class="main grid">
    <div class="section">
      <section class="intro container-i" id="not-an-ad" data-nav-1="Not an ad">
        <figure class="first-content">
          <div class="reel">
            <video src={data.deck.reel.url} autoplay loop muted playsinline
            ></video>
          </div>
        </figure>
        <h1>
          NOT AN AD<NotAnAdLogo class="inline-icon" fill="currentColor" />is a
          social media<br />
          advertising agency<TapeIcon class="inline-icon" />based<br />
          in new york city
        </h1>
      </section>
      <section class="services container-i" id="services" data-nav-1="Services">
        <div class="services--grid">
          <h2>[<span>↘</span>] Services</h2>
          <article>
            <h3>
              <IconStrategy
                fill="currentColor"
                width="1em"
                height="1em"
              />Strategy
            </h3>
            <p>
              ↳ In eiusmod occaecat aute magna veniam elit minim consectetur
              adipisicing exercitation pariatur exercitation veniam magna.
              Labore nisi laboris tempor sint non.
            </p>
          </article>
          <article>
            <h3>
              <IconPartnership
                fill="currentColor"
                width="1em"
                height="1em"
              />Partnership
            </h3>
            <p>
              ↳ In eiusmod occaecat aute magna veniam elit minim consectetur
              adipisicing exercitation pariatur exercitation veniam magna.
              Labore nisi laboris tempor sint non.
            </p>
          </article>
          <article>
            <h3>
              <IconContent
                fill="currentColor"
                width="1em"
                height="1em"
              />Content creation
            </h3>
            <p>
              ↳ In eiusmod occaecat aute magna veniam elit minim consectetur
              adipisicing exercitation pariatur exercitation veniam magna.
              Labore nisi laboris tempor sint non.
            </p>
          </article>
          <article>
            <h3>
              <IconEarnedMedia
                fill="currentColor"
                width="1em"
                height="1em"
              />Earned media
            </h3>
            <p>
              ↳ In eiusmod occaecat aute magna veniam elit minim consectetur
              adipisicing exercitation pariatur exercitation veniam magna.
              Labore nisi laboris tempor sint non.
            </p>
          </article>
          <article>
            <h3>
              <IconAmplification
                fill="currentColor"
                width="1em"
                height="1em"
              />Amplification
            </h3>
            <p>
              ↳ In eiusmod occaecat aute magna veniam elit minim consectetur
              adipisicing exercitation pariatur exercitation veniam magna.
              Labore nisi laboris tempor sint non.
            </p>
          </article>
        </div>
      </section>
    </div>
    <section class="case-studies">
      {
        sections.map((section: Section) => {
          return (
            <>
              <section
                class="case-study section-header"
                id="case-studies"
                data-nav-1="Case studies"
              >
                <div class="container subgrid">
                  <div class="case-studies--grid">
                    <h2>
                      [<span>↘</span>] {section.sectionTitle}
                    </h2>
                    <ul>
                      {section.projects.map((project: Project) => {
                        return (
                          <li>
                            <a href={`#${project.slug}`}>
                              {project.clientName}
                            </a>
                          </li>
                        );
                      })}
                    </ul>
                  </div>
                  <span class="marquee">
                    | →[case studies]*{" "}
                    <span aria-hidden="true">
                      | →[case studies]* | →[case studies]* | →[case studies]* |
                      →[case studies]* | →[case studies]*
                    </span>
                  </span>
                </div>
              </section>
              {section.projects.map((project: Project) => {
                return (
                  <div class="grid">
                    <section
                      class="case-study case-study-grid"
                      id={project.slug}
                      data-nav-2={project.slug}
                    >
                      <fieldset>
                        <legend>
                          <h3>{project.clientName}</h3>
                        </legend>
                        {project.url && (
                          <p>
                            <a href={project.url} target="_blank">
                              [↗] Link
                            </a>
                          </p>
                        )}
                        {project.publicationDate && (
                          <p class="case-study--year">
                            <span>Year</span>
                            <span>
                              {new Date(project.publicationDate).getFullYear()}
                            </span>
                          </p>
                        )}
                        <div
                          class="description"
                          set:html={project.projectDescription}
                        />
                      </fieldset>
                      <ul class="content-grid" data-view="grid">
                        {project.assets.map((asset: Asset) => {
                          return (
                            <CaseStudy
                              id={asset.id}
                              title={asset.projectType}
                              category={asset.projectType}
                              url={asset.asset.url}
                              format={asset.asset.format}
                              year={new Date(
                                project.publicationDate
                              ).getFullYear()}
                            />
                          );
                        })}
                      </ul>
                    </section>
                  </div>
                );
              })}
            </>
          );
        })
      }
    </section>
    <footer class="intro-footer">
      <TapeIcon />
      <span id="intro-time">15:32:00</span>
    </footer>
  </main>
</div>
<dialog id="lightbox">
  <header>
    <NotAnAdLogo width={24} fill="currentColor" />
    <button class="button">[ X ]</button>
  </header>
  <figure class="modal-content"></figure>
</dialog>
<script>
  const introTime = document.getElementById("intro-time") as HTMLSpanElement;

  /* update the clock at the bottom of the page */
  function updateTime() {
    const time = new Date();
    const formattedTime = time.toLocaleTimeString("en-US", { hour12: false });
    introTime.textContent = formattedTime;
  }

  updateTime();
  setInterval(updateTime, 1000);

  // clickoutside of the details element closes it
  document.addEventListener("click", (e) => {
    // check if the target is not a details element
    const allDetails = document.querySelectorAll("details");
    allDetails.forEach((d) => {
      d.removeAttribute("open");
    });
  });

  // add intersection observers to update the nav
  const observedAttributes = ["nav-1", "nav-2"];

  observedAttributes.forEach((attr) => {
    const sections = document.querySelectorAll(`[data-${attr}]`);
    const options: IntersectionObserverInit = {
      root: null,
      rootMargin: "0px",
      threshold: 0.5,
    };

    const callback: IntersectionObserverCallback = (
      entries: IntersectionObserverEntry[]
    ) => {
      entries.forEach((entry) => {
        if (entry.isIntersecting) {
          const navSummary = document.querySelector(`summary#${attr}`);
          const navVal = entry.target.getAttribute(`data-${attr}`);
          if (navSummary?.innerHTML) {
            navSummary.innerHTML = navVal ?? "";
          }
        }
      });
    };

    const observer = new IntersectionObserver(callback, options);
    sections.forEach((section) => {
      observer.observe(section);
    });
  });
</script>
<script src="../scripts/video-playback.js"></script>
<script src="../scripts/lightbox.js"></script>
