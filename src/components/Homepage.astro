---
import "../styles/components/homepage.css";

import NotAnAdLogo from "../assets/images/svg/NOT_AN_AD_LOGO.svg";
import IconStrategy from "../assets/images/svg/icon_strategy.svg";
import IconPartnership from "../assets/images/svg/icon_partnerships.svg";
import IconEarnedMedia from "../assets/images/svg/icon_earned_media.svg";
import IconContent from "../assets/images/svg/icon_content.svg";
import IconAmplification from "../assets/images/svg/icon_amplification.svg";
import CaseStudy from "./CaseStudy.astro";

import { homepageQuery, type HomepageData } from "../gql/queries.ts";

const response = await fetch("https://graphql.datocms.com/", {
  method: "POST",
  headers: {
    "Content-Type": "application/json",
    Accept: "application/json",
    Authorization: `Bearer ${import.meta.env.DATOCMS_API_KEY}`,
  },
  body: JSON.stringify({
    query: homepageQuery,
  }),
});

const json = await response.json();
const data: HomepageData = json.data;

const imageShape = (w: number, h: number) => {
  let shape: "h" | "v" | "s";
  if (w > h) {
    shape = "h"; // landscape
  } else if (w < h) {
    shape = "v"; // portrait
  } else {
    shape = "s"; // square
  }
  return shape;
};
---

<main class="grid">
  <span id="top"></span>

  <a class="button work-link" href="#work">Work</a>
  <aside>
    <div class="inner">
      <a href="#top" class="logo" aria-label="Home"
        ><NotAnAdLogo width={24} fill="currentColor" /></a
      >
      <header set:html={data.home.intro} />
      <figure class="first-content">
        <video
          src={data.home.reel.url}
          class="case-study__asset"
          autoplay
          loop
          muted
          playsinline></video>
      </figure>
      <footer class="footer">
        <p set:html={data.home.contact} />
        <br />
        <p>â†’ <a href="mailto:info@notanad.us">youup@notanad.us</a></p>
      </footer>
    </div>
  </aside>

  <section class="content" id="work">
    <figure class="first-content content-slot">
      <video
        src={data.home.reel.url}
        autoplay
        loop
        muted
        playsinline
        class="case-study__asset"></video>
    </figure>
    <div class="filter-view-menu">
      <fieldset class="filter-menu">
        <legend class="visually-hidden">Filter</legend>
        <button
          id="filter-button"
          popovertarget="filters-popover"
          class="button">Filter</button
        >
        <ul class="content-filter" id="filters-popover" popover>
          <li>
            <label for="strategy">
              <input
                type="checkbox"
                name="content-filter"
                id="strategy"
                value="strategy"
              />
              <IconStrategy
                fill="currentColor"
                width="15"
                height="15"
                role="presentation"
              />
              Strategy
            </label>
          </li>
          <li>
            <label for="partnership">
              <input
                type="checkbox"
                name="content-filter"
                id="partnership"
                value="partnership"
              />
              <IconPartnership
                fill="currentColor"
                width="15"
                height="15"
                role="presentation"
              />
              Partnership
            </label>
          </li>
          <li>
            <label for="amplification">
              <input
                type="checkbox"
                name="content-filter"
                id="amplification"
                value="amplification"
              />
              <IconAmplification
                fill="currentColor"
                width="15"
                height="15"
                role="presentation"
              />
              Amplification
            </label>
          </li>
          <li>
            <label for="content">
              <input
                type="checkbox"
                name="content-filter"
                id="content"
                value="content"
              />
              <IconContent
                fill="currentColor"
                width="15"
                height="15"
                role="presentation"
              />
              Content creation
            </label>
          </li>
          <li>
            <label for="earned-media">
              <input
                type="checkbox"
                name="content-filter"
                id="earned-media"
                value="earned media"
              />
              <IconEarnedMedia
                fill="currentColor"
                width="15"
                height="15"
                role="presentation"
              />
              Earned media
            </label>
          </li>
        </ul>
      </fieldset>
      <fieldset class="view-menu">
        <ul class="content-view" id="view-menu--controls">
          <li>
            <label for="view-menu--grid">
              <input
                type="radio"
                name="content-view-type"
                id="view-menu--grid"
                checked
              />
              Grid
            </label>
          </li>
          <li>
            <label for="view-menu--list">
              <input
                type="radio"
                name="content-view-type"
                id="view-menu--list"
              />
              List
            </label>
          </li>
        </ul>
      </fieldset>
    </div>
    <ul class="content-grid" data-view="grid">
      {
        data.allHomepageProjects.map((project) => {
          return (
            <CaseStudy
              id={project.id}
              title={project.title}
              category={project.projectType}
              url={project.media.url}
              alt={project.media.alt || project.title}
              year={project.publishedDate.split("-")[0]}
              shape={imageShape(project.media.width, project.media.height)}
            >
              <IconStrategy
                slot="icon"
                fill="currentColor"
                width="15"
                height="15"
                role="presentation"
              />
            </CaseStudy>
          );
        })
      }
    </ul>
  </section>
</main>

<dialog id="lightbox">
  <header>
    <NotAnAdLogo width={24} fill="currentColor" />
    <button class="button">[ X ]</button>
  </header>
  <figure class="modal-content"></figure>
</dialog>
<picture id="hover-preview">
  <img src="https://placehold.co/500x500" alt="" />
</picture>
<script>
  //filtering and list display switching
  const filterButton = document.getElementById("filter-button");
  const filterPopover = document.getElementById("filters-popover");
  const filterCheckboxes = document.querySelectorAll(
    '#filters-popover input[type="checkbox"]'
  );
  const viewRadios = document.querySelectorAll(
    '.content-view input[type="radio"]'
  );
  const contentGrid = document.querySelector(".content-grid") as HTMLElement;
  const contentGridListItems = contentGrid.querySelectorAll(
    ".content-grid > li"
  ) as NodeListOf<HTMLElement>;
  const contentListButtons = contentGrid.querySelectorAll(
    ".content-grid > li button"
  ) as NodeListOf<HTMLButtonElement>;

  const follower = document.getElementById("hover-preview");

  contentGridListItems.forEach((item) => {
    item.addEventListener("mouseover", (event) => {
      updateFollowerImage(event);
    });
  });

  filterCheckboxes.forEach((chk) => {
    chk.addEventListener("change", (event) => {
      filterCheckboxes.forEach((checkbox) => {
        if (checkbox !== event.target) {
          (checkbox as HTMLInputElement).checked = false;
        }
      });
      const target = event.target as HTMLInputElement;
      const icon = target.parentElement
        ?.querySelector("svg")
        ?.cloneNode(true) as SVGElement;

      if (filterButton) {
        if (target.checked) {
          filterButton.replaceChildren(icon);
          filterButton.innerHTML += target.parentElement?.innerText;
        } else {
          filterButton.innerHTML = "Filter";
        }
      }

      function filter() {
        if (contentGrid) {
          contentGrid.dataset.filter =
            target.checked && target.value ? target.value : "";
        }
      }

      document.startViewTransition
        ? document.startViewTransition(() => filter())
        : filter();

      filterPopover && filterPopover.hidePopover();
    });
  });

  let shouldTrackMouse = false;
  let mouseX = 0,
    mouseY = 0;
  let rafId: number | null = null;
  viewRadios.forEach((radio) => {
    radio.addEventListener("change", (event) => {
      const target = event.target as HTMLInputElement;
      const view = target.id.split("--")[1];

      function changeView() {
        if (contentGrid) {
          contentGrid.dataset.view = view;
          if (view === "list") {
            shouldTrackMouse = true;
          } else {
            shouldTrackMouse = false;
          }
        }
      }

      document.startViewTransition
        ? document.startViewTransition(() => changeView())
        : changeView();
    });
  });

  document.addEventListener("mousemove", (e) => {
    mouseX = e.clientX;
    mouseY = e.clientY;
    if (!rafId && shouldTrackMouse) {
      rafId = requestAnimationFrame(updateFollower);
    }
  });

  contentListButtons.forEach((b) => {
    b.addEventListener("focus", (event) => {
      const target = event.currentTarget as HTMLButtonElement;
      const figc = target.querySelector("figcaption") as HTMLElement;
      const rect = figc.getBoundingClientRect();
      mouseX = rect.left;
      mouseY = rect.top;
      if (!rafId && shouldTrackMouse) {
        rafId = requestAnimationFrame(updateFollower);
        updateFollowerImage(event);
      }
    });
  });

  function updateFollower() {
    if (follower && shouldTrackMouse) {
      let ty = 0;
      if (window.innerHeight - mouseY < 350) {
        ty = 100;
      }
      follower.style.transform = `translate(-50%, calc( ${mouseY}px - ${ty}% - (${ty} * 0.06px) )`;
      rafId = null;
    }
  }

  function updateFollowerImage(event: Event) {
    const target = event.currentTarget as HTMLElement;
    follower
      ?.querySelector("img")
      ?.setAttribute(
        "src",
        target.querySelector("img")?.getAttribute("src") || ""
      );
  }
</script>

<script src="../scripts/video-playback.js"></script>
<script src="../scripts/lightbox.js"></script>
